// Enhanced dashboard.js for unlimited data handling
class ClashDashboard {
    constructor() {
        this.charts = {};
        this.data = null;
        this.theme = localStorage.getItem('theme') || 'light';
        this.currentPage = 1;
        this.eventsPerPage = 50;
        this.dateFilter = 'all'; // 'all', '30days', '90days', '1year'
        this.filteredData = null;
        this.init();
    }

    init() {
        this.applyTheme();
        this.loadData();
        this.setupEventListeners();
        this.setupFilters();
        
        // Auto-refresh every 5 minutes
        setInterval(() => this.loadData(), 5 * 60 * 1000);
    }

    setupEventListeners() {
        window.toggleTheme = () => this.toggleTheme();
        window.closeErrorModal = () => this.closeErrorModal();
        window.loadData = () => this.loadData();
        
        // Pagination events
        window.nextPage = () => this.nextPage();
        window.prevPage = () => this.prevPage();
        window.goToPage = (page) => this.goToPage(page);
        
        // Filter events  
        window.filterByDate = (filter) => this.filterByDate(filter);
        window.exportData = (format) => this.exportData(format);
    }

    setupFilters() {
        // Add filter controls to header
        const headerRight = document.querySelector('.header-right');
        
        // Date filter dropdown
        const filterContainer = document.createElement('div');
        filterContainer.className = 'filter-container';
        filterContainer.innerHTML = `
            <select id="dateFilter" onchange="filterByDate(this.value)">
                <option value="all">All Time</option>
                <option value="30days">Last 30 Days</option>
                <option value="90days">Last 90 Days</option>
                <option value="1year">Last Year</option>
            </select>
        `;
        
        // Export button
        const exportBtn = document.createElement('button');
        exportBtn.className = 'refresh-btn';
        exportBtn.innerHTML = 'ðŸ“¥ Export';
        exportBtn.onclick = () => this.showExportOptions();
        
        headerRight.insertBefore(filterContainer, headerRight.lastElementChild);
        headerRight.insertBefore(exportBtn, headerRight.lastElementChild);
    }

    async loadData() {
        try {
            this.showLoading();
            
            const timestamp = new Date().getTime();
            const response = await fetch(`./data/logs.json?t=${timestamp}`);
            
            if (!response.ok) {
                this.data = this.getSampleData();
            } else {
                this.data = await response.json();
            }
            
            // Show data statistics
            this.showDataStatistics();
            
            // Apply current filter
            this.applyDateFilter();
            
            this.updateDashboard();
            this.hideLoading();
            
        } catch (error) {
            console.error('Error loading data:', error);
            this.showError('Failed to load dashboard data. Using sample data.');
            this.data = this.getSampleData();
            this.applyDateFilter();
            this.updateDashboard();
            this.hideLoading();
        }
    }

    showDataStatistics() {
        const stats = this.calculateDataStatistics();
        console.log('ðŸ“Š Dashboard Data Statistics:', stats);
        
        // Add data info to header subtitle
        const subtitle = document.querySelector('.subtitle');
        if (subtitle && this.data) {
            const totalEvents = this.data.recentEvents ? this.data.recentEvents.length : 0;
            const dateRange = this.getDateRange();
            subtitle.textContent = `Real-time monitoring | ${totalEvents.toLocaleString()} events | ${dateRange}`;
        }
    }

    calculateDataStatistics() {
        if (!this.data) return {};
        
        const events = this.data.recentEvents || [];
        const dailyStats = this.data.dailyStats || [];
        
        return {
            totalEvents: events.length,
            totalDays: dailyStats.length,
            totalClashes: this.data.summary?.totalClashes || 0,
            totalXClicks: this.data.summary?.totalXClicks || 0,
            uniqueUsers: this.data.summary?.uniqueUsers || 0,
            uniqueProjects: this.data.summary?.uniqueProjects || 0,
            dateRange: this.getDateRange(),
            dataSize: JSON.stringify(this.data).length
        };
    }

    getDateRange() {
        if (!this.data?.recentEvents?.length) return 'No data';
        
        const events = this.data.recentEvents;
        const dates = events.map(e => new Date(e.timestamp)).sort();
        const start = dates[0];
        const end = dates[dates.length - 1];
        
        if (this.isSameDay(start, end)) {
            return start.toLocaleDateString();
        }
        
        return `${start.toLocaleDateString()} - ${end.toLocaleDateString()}`;
    }

    isSameDay(date1, date2) {
        return date1.toDateString() === date2.toDateString();
    }

    filterByDate(filter) {
        this.dateFilter = filter;
        this.currentPage = 1;
        this.applyDateFilter();
        this.updateDashboard();
        
        // Update URL to remember filter
        const url = new URL(window.location);
        url.searchParams.set('filter', filter);
        window.history.replaceState({}, '', url);
    }

    applyDateFilter() {
        if (!this.data) return;
        
        let cutoffDate = null;
        const now = new Date();
        
        switch (this.dateFilter) {
            case '30days':
                cutoffDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
                break;
            case '90days':
                cutoffDate = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);
                break;
            case '1year':
                cutoffDate = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000);
                break;
            default:
                cutoffDate = null;
        }
        
        // Clone original data
        this.filteredData = JSON.parse(JSON.stringify(this.data));
        
        if (cutoffDate) {
            // Filter events
            this.filteredData.recentEvents = this.data.recentEvents.filter(event => 
                new Date(event.timestamp) >= cutoffDate
            );
            
            // Filter daily stats
            this.filteredData.dailyStats = this.data.dailyStats.filter(stat => 
                new Date(stat.date) >= cutoffDate
            );
            
            // Recalculate summary for filtered data
            this.recalculateFilteredSummary();
        }
    }

    recalculateFilteredSummary() {
        if (!this.filteredData) return;
        
        const events = this.filteredData.recentEvents;
        const clashEvents = events.filter(e => e.type === 'clash');
        const xClickEvents = events.filter(e => e.type === 'x_click');
        
        const users = [...new Set(events.map(e => e.user))];
        const projects = [...new Set(events.map(e => e.project))];
        
        this.filteredData.summary = {
            ...this.filteredData.summary,
            totalClashes: clashEvents.length,
            totalXClicks: xClickEvents.length,
            uniqueUsers: users.length,
            uniqueProjects: projects.length
        };
    }

    updateDashboard() {
        const dataToUse = this.filteredData || this.data;
        this.updateSummaryCards(dataToUse);
        this.updateCharts(dataToUse);
        this.updateTables(dataToUse);
        this.updateLastUpdated();
        this.updatePagination();
    }

    updateSummaryCards(data) {
        const summary = data.summary;
        
        document.getElementById('totalClashes').textContent = summary.totalClashes.toLocaleString();
        document.getElementById('totalXClicks').textContent = summary.totalXClicks.toLocaleString();
        document.getElementById('uniqueUsers').textContent = summary.uniqueUsers.toLocaleString();
        document.getElementById('uniqueProjects').textContent = summary.uniqueProjects.toLocaleString();
        
        // Add filter indicator
        const filterIndicator = this.dateFilter === 'all' ? '' : ` (${this.getFilterLabel()})`;
        document.querySelector('#totalClashes').parentElement.querySelector('h3').textContent = 
            'Total Clashes' + filterIndicator;
    }

    getFilterLabel() {
        switch (this.dateFilter) {
            case '30days': return 'Last 30 Days';
            case '90days': return 'Last 90 Days';
            case '1year': return 'Last Year';
            default: return '';
        }
    }

    updateCharts(data) {
        // Limit chart data for performance - show max 100 data points
        const limitedDailyStats = data.dailyStats.slice(-100);
        
        this.createDailyActivityChart(limitedDailyStats);
        this.createUserActivityChart(data.userActivity);
        this.createProjectChart(data.projectStats);
        this.createHourlyChart(data.recentEvents);
    }

    updateRecentActivityTable() {
        const dataToUse = this.filteredData || this.data;
        const tbody = document.getElementById('recentActivityBody');
        tbody.innerHTML = '';

        // Calculate pagination
        const totalEvents = dataToUse.recentEvents.length;
        const startIndex = (this.currentPage - 1) * this.eventsPerPage;
        const endIndex = Math.min(startIndex + this.eventsPerPage, totalEvents);
        const eventsToShow = dataToUse.recentEvents.slice(startIndex, endIndex);

        // Add pagination info
        const tableContainer = tbody.closest('.table-container');
        let paginationInfo = tableContainer.querySelector('.pagination-info');
        if (!paginationInfo) {
            paginationInfo = document.createElement('div');
            paginationInfo.className = 'pagination-info';
            tableContainer.querySelector('.table-header').appendChild(paginationInfo);
        }
        
        paginationInfo.innerHTML = `
            Showing ${startIndex + 1}-${endIndex} of ${totalEvents.toLocaleString()} events
            <div class="pagination-controls">
                <button onclick="prevPage()" ${this.currentPage === 1 ? 'disabled' : ''}>â€¹ Previous</button>
                <span>Page ${this.currentPage} of ${Math.ceil(totalEvents / this.eventsPerPage)}</span>
                <button onclick="nextPage()" ${endIndex >= totalEvents ? 'disabled' : ''}>Next â€º</button>
            </div>
        `;

        eventsToShow.forEach(event => {
            const row = document.createElement('tr');
            const time = new Date(event.timestamp).toLocaleString();
            const actionBadge = event.type === 'x_click' ? 
                '<span class="badge badge-warning">X-Click</span>' : 
                '<span class="badge badge-error">Clash</span>';

            row.innerHTML = `
                <td>${time}</td>
                <td>${event.user}</td>
                <td>${event.project}</td>
                <td>${actionBadge}</td>
            `;
            tbody.appendChild(row);
        });
    }

    updatePagination() {
        this.updateRecentActivityTable();
    }

    nextPage() {
        const dataToUse = this.filteredData || this.data;
        const totalPages = Math.ceil(dataToUse.recentEvents.length / this.eventsPerPage);
        if (this.currentPage < totalPages) {
            this.currentPage++;
            this.updatePagination();
        }
    }

    prevPage() {
        if (this.currentPage > 1) {
            this.currentPage--;
            this.updatePagination();
        }
    }

    goToPage(page) {
        const dataToUse = this.filteredData || this.data;
        const totalPages = Math.ceil(dataToUse.recentEvents.length / this.eventsPerPage);
        if (page >= 1 && page <= totalPages) {
            this.currentPage = page;
            this.updatePagination();
        }
    }

    showExportOptions() {
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.style.display = 'flex';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>ðŸ“¥ Export Data</h3>
                    <span class="close" onclick="this.closest('.modal').remove()">&times;</span>
                </div>
                <div class="modal-body">
                    <p>Choose export format and data range:</p>
                    <div style="margin: 1rem 0;">
                        <label>
                            <input type="radio" name="exportFormat" value="json" checked> JSON (Complete Data)
                        </label><br>
                        <label>
                            <input type="radio" name="exportFormat" value="csv"> CSV (Events Only)
                        </label><br>
                        <label>
                            <input type="radio" name="exportFormat" value="excel"> Excel (Summary + Events)
                        </label>
                    </div>
                    <div style="margin: 1rem 0;">
                        <label>
                            <input type="radio" name="exportRange" value="current" checked> Current Filter (${this.getFilterLabel() || 'All Data'})
                        </label><br>
                        <label>
                            <input type="radio" name="exportRange" value="all"> All Historical Data
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button onclick="this.closest('.modal').remove()">Cancel</button>
                    <button onclick="dashboard.performExport(); this.closest('.modal').remove()">Export</button>
                </div>
            </div>
        `;
        document.body.appendChild(modal);
    }

    performExport() {
        const format = document.querySelector('input[name="exportFormat"]:checked').value;
        const range = document.querySelector('input[name="exportRange"]:checked').value;
        
        const dataToExport = range === 'all' ? this.data : (this.filteredData || this.data);
        const timestamp = new Date().toISOString().split('T')[0];
        
        switch (format) {
            case 'json':
                this.downloadFile(
                    JSON.stringify(dataToExport, null, 2),
                    `clash-data-${timestamp}.json`,
                    'application/json'
                );
                break;
            case 'csv':
                this.downloadFile(
                    this.convertToCSV(dataToExport.recentEvents),
                    `clash-events-${timestamp}.csv`,
                    'text/csv'
                );
                break;
            case 'excel':
                // For now, export as CSV (could be enhanced to actual Excel format)
                this.downloadFile(
                    this.convertToExcelCSV(dataToExport),
                    `clash-report-${timestamp}.csv`,
                    'text/csv'
                );
                break;
        }
    }

    convertToCSV(events) {
        const headers = ['Timestamp', 'Type', 'User', 'Project', 'Action'];
        const rows = events.map(event => [
            event.timestamp,
            event.type,
            event.user,
            event.project,
            event.action
        ]);

        return [headers, ...rows].map(row => 
            row.map(cell => `"${cell}"`).join(',')
        ).join('\n');
    }

    convertToExcelCSV(data) {
        let csv = 'CLASH DETECTION DASHBOARD REPORT\n';
        csv += `Generated: ${new Date().toLocaleString()}\n\n`;
        
        csv += 'SUMMARY\n';
        csv += `Total Clashes,${data.summary.totalClashes}\n`;
        csv += `Total X-Clicks,${data.summary.totalXClicks}\n`;
        csv += `Active Users,${data.summary.uniqueUsers}\n`;
        csv += `Active Projects,${data.summary.uniqueProjects}\n\n`;
        
        csv += 'RECENT EVENTS\n';
        csv += this.convertToCSV(data.recentEvents);
        
        return csv;
    }

    downloadFile(content, filename, mimeType) {
        const blob = new Blob([content], { type: mimeType });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    }

    // Keep all existing methods (updateUserStatsTable, updateProjectStatsTable, etc.)
    // ... rest of existing code remains the same
}
